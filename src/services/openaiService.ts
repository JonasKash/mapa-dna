interface OracleResponse {
  revelacao: string;
  arquetipo: string;
  essencia: string;
  obstaculo: string;
  acao_imediata: string;
  numero_final: number;
}

interface FunnelData {
  name: string;
  birthDate: string;
  whatsapp: string;
  question1: string;
  question2: string;
  money: number;
  currentStep: number;
  achievements: string[];
  monthlyPotential: number;
}

// URL do backend - configur√°vel via vari√°vel de ambiente ou padr√£o local
const BACKEND_URL = 'http://localhost:3002';

export const generateOracleRevelation = async (data: FunnelData): Promise<OracleResponse> => {
  const requestId = Math.random().toString(36).substr(2, 9);
  const startTime = Date.now();
  
  try {
    console.log(`=== FRONTEND: Calling Oracle API [${requestId}] ===`);
    console.log(`[${requestId}] Timestamp:`, new Date().toISOString());
    console.log(`[${requestId}] Data being sent:`, JSON.stringify(data, null, 2));
    console.log(`[${requestId}] Backend URL:`, `${BACKEND_URL}/api/oracle/generate`);
    console.log(`[${requestId}] Data size:`, JSON.stringify(data).length, 'bytes');
    
    // Verificar se o backend est√° acess√≠vel
    console.log(`[${requestId}] üîç Checking backend connectivity...`);
    const healthCheck = await fetch(`${BACKEND_URL}/api/health`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    }).catch(error => {
      console.error(`[${requestId}] ‚ùå Backend health check failed:`, error);
      return null;
    });
    
    if (healthCheck) {
      console.log(`[${requestId}] ‚úÖ Backend health check passed:`, healthCheck.status);
    } else {
      console.log(`[${requestId}] ‚ö†Ô∏è Backend health check failed, proceeding anyway...`);
    }
    
    // Chama o backend ao inv√©s da OpenAI diretamente
    console.log(`[${requestId}] üöÄ Making request to backend...`);
    const fetchStartTime = Date.now();
    
    // Implementar timeout de 10 segundos no frontend
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);
    
    const response = await fetch(`${BACKEND_URL}/api/oracle/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
      signal: controller.signal
    });

    clearTimeout(timeoutId);
    const fetchEndTime = Date.now();
    console.log(`[${requestId}] ‚è±Ô∏è Fetch completed in ${fetchEndTime - fetchStartTime}ms`);
    console.log(`[${requestId}] Response status:`, response.status);
    console.log(`[${requestId}] Response ok:`, response.ok);
    console.log(`[${requestId}] Response headers:`, Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      console.log(`[${requestId}] ‚ùå Response not ok, parsing error data...`);
      const errorData = await response.json().catch(error => {
        console.error(`[${requestId}] ‚ùå Failed to parse error response:`, error);
        return { error: 'Failed to parse error response' };
      });
      console.error(`[${requestId}] Backend API error:`, errorData);
      
      // Tratamento espec√≠fico para rate limiting
      if (response.status === 429) {
        throw new Error(`RATE_LIMIT_EXCEEDED: ${errorData.message || 'Limite de requisi√ß√µes excedido'}`);
      }
      
      throw new Error(`Backend API error: ${response.status} - ${errorData.error || 'Unknown error'}`);
    }

    console.log(`[${requestId}] ‚úÖ Response ok, parsing JSON...`);
    const oracleData = await response.json() as OracleResponse;
    console.log(`[${requestId}] Oracle data received:`, oracleData);
    
    const totalTime = Date.now() - startTime;
    console.log(`[${requestId}] üéâ Frontend request completed successfully in ${totalTime}ms`);
    
    return oracleData;

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error(`[${requestId}] ‚ùå Error generating oracle revelation after ${totalTime}ms:`, error);
    console.error(`[${requestId}] Error stack:`, error.stack);
    
    // Se for timeout ou erro de conex√£o, usar resposta artificial
    if (error.name === 'AbortError' || error.message.includes('ERR_CONNECTION_REFUSED') || error.message.includes('Failed to fetch')) {
      console.log(`[${requestId}] üé≠ Using artificial response due to timeout/connection error`);
      return generateArtificialResponse(data);
    }
    
    console.log(`[${requestId}] Throwing error instead of using fallback`);
    throw error;
  }
};

// Fun√ß√£o para gerar resposta artificial no frontend (fallback)
const generateArtificialResponse = (data: FunnelData): OracleResponse => {
  const archetypes = {
    1: { name: "Arquiteto da Abund√¢ncia", essence: "Lideran√ßa e inova√ß√£o" },
    2: { name: "Vision√°rio das Oportunidades", essence: "Intui√ß√£o e colabora√ß√£o" },
    3: { name: "Alquimista da Palavra", essence: "Criatividade e express√£o" },
    4: { name: "Curador da Transforma√ß√£o", essence: "Estabilidade e cura" },
    5: { name: "Explorador da Liberdade", essence: "Aventura e mudan√ßa" },
    6: { name: "Guardi√£o da Harmonia", essence: "Responsabilidade e amor" },
    7: { name: "M√≠stico da Sabedoria", essence: "Espiritualidade e an√°lise" },
    8: { name: "Magnata do Poder", essence: "Autoridade e materializa√ß√£o" },
    9: { name: "Filantropo Universal", essence: "Servi√ßo e compaix√£o" },
    11: { name: "Curador da Transforma√ß√£o", essence: "Intui√ß√£o elevada e cura" },
    22: { name: "Construtor Mestre", essence: "Vis√£o global e manifesta√ß√£o" },
    33: { name: "Mestre da Compaix√£o", essence: "Servi√ßo universal e cura" }
  };

  const obstacles = [
    "procrastina√ß√£o excessiva que paralisa sua a√ß√£o",
    "excesso de oportunidades que dispersa seu foco",
    "excesso de conhecimentos que gera paralisia",
    "excesso de amizades ruins que drenam sua energia",
    "medo do sucesso que sabota suas conquistas",
    "perfeccionismo que impede a execu√ß√£o",
    "ansiedade que bloqueia sua intui√ß√£o",
    "depend√™ncia de aprova√ß√£o externa"
  ];

  // Gerar n√∫mero aleat√≥rio baseado no nome
  const nameHash = data.name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  const randomNumber = (nameHash % 9) + 1;
  
  const archetype = archetypes[randomNumber] || archetypes[1];
  const obstacle = obstacles[Math.floor(Math.random() * obstacles.length)];

  const responses = {
    "Dobrar Renda": "Estrat√©gia de m√∫ltiplas fontes de renda atrav√©s de investimentos e empreendedorismo digital",
    "Liberdade Financeira": "Caminho da independ√™ncia atrav√©s de ativos que geram renda passiva",
    "Investir Melhor": "Educa√ß√£o financeira e diversifica√ß√£o de portf√≥lio para maximizar retornos",
    "Sair das D√≠vidas": "Plano de reestrutura√ß√£o financeira e mudan√ßa de h√°bitos de consumo",
    "Aposentadoria": "Constru√ß√£o de patrim√¥nio de longo prazo com foco em seguran√ßa"
  };

  const strategy = responses[data.question1] || "Desenvolvimento de habilidades de alto valor e cria√ß√£o de m√∫ltiplas fontes de renda";

  return {
    revelacao: `${data.name}, sua ess√™ncia √∫nica vibra no n√∫mero ${randomNumber}, despertando o ${archetype.name} que habita em voc√™.`,
    arquetipo: archetype.name,
    essencia: archetype.essence,
    obstaculo: obstacle,
    acao_imediata: "Nos pr√≥ximos 7 dias, escolha UMA a√ß√£o espec√≠fica e execute sem perfeicionismo",
    numero_final: randomNumber
  };
};
